#### Jordan Adamson ####

#on PC w/ source build
# sudo cp ~/Rprofile.site ~/lib64/R/etc/Rprofile.site 

# on PC w/ yum build
# sudo cp ~/Rprofile.site /usr/lib64/R/etc/Rprofile.site 

## on PC with revolution source build
## sudo cp ~/Rprofile.site \
## $HOME/microsoft-r-open-MRO-3.3.1/source/etc/Rprofile.site

#on Cluster;  Upload Main
## without MKL
    ## cp ~/Rprofile.site $HOME/lib64/R/etc/Rprofile.site
##  with MKL 
## cp ~/Rprofile.site $HOME/microsoft-r-open-MRO-3.3.1/source/etc/Rprofile.site


## Make sure:
# mkdir -p ~/lib64/R/library
# sudo chmod -R a+w ~/lib64/R/library
# sudo chmod -R a+w ~/lib64/R/


#---------------------------------------------------------------------------
##################
# My Information
##################

Jordan <- paste0("Jordan Adamson, ", Sys.Date() )
DAY    <- format( Sys.time(), "%Y-%m-%d")

## Library
#.libPaths("~/lib64/R/library")
.libPaths("~/R-Libs")

#---------------------------------------------------------------------------
##################
# ALWAYS USED
##################
#message("always used")

exit <- function() { q("no") }

## Options
options(download.file.method = "wget")
options(stringsAsFactors = FALSE)
#options(repos = c(CRAN = "https://cran.revolutionanalytics.com") )
options(repos = c(CRAN="https://cloud.r-project.org/") )
#setRepositories(ind = c(1:9))


options(menu.graphics = FALSE)

options("Ncpus" = as.numeric(system("nproc", intern=TRUE)) ) 


## Compiling
library( compiler ) #R_COMPILE_PKGS=TRUE # R_ENABLE_JIT=3
invisible( compilePKGS( "TRUE" ) )
#invisible( enableJIT(2) ) 


#message("USE LAPACK")
## USE LAPACK
qr.default1 <- function (x, tol = 1e-07, LAPACK=T, ...) {
    x <- as.matrix(x)
    if (is.complex(x)) 
        return(structure(.Internal(La_qr_cmplx(x)), class = "qr"))
    if (LAPACK) 
        return(structure(.Internal(La_qr(x)), useLAPACK = TRUE, 
            class = "qr"))
    p <- as.integer(ncol(x))
    if (is.na(p)) 
        stop("invalid ncol(x)")
    n <- as.integer(nrow(x))
    if (is.na(n)) 
        stop("invalid nrow(x)")
    if (1 * n * p > 2147483647) 
        stop("too large a matrix for LINPACK")
    storage.mode(x) <- "double"
    res <- .Fortran(.F_dqrdc2, qr = x, n, n, p, as.double(tol), 
        rank = integer(1L), qraux = double(p), pivot = as.integer(seq_len(p)), 
        double(2L * p))[c(1, 6, 7, 8)]
    if (!is.null(cn <- colnames(x))) 
        colnames(res$qr) <- cn[res$pivot]
    class(res) <- "qr"
    res
}

utils::assignInNamespace("qr.default", qr.default1, "base")


## I should change Convergence Tolerances
#optim
#‘reltol’ Relative convergence tolerance. Defaults to ‘sqrt(.Machine$double.eps)’
# The algorithm stops at a step if it is unable to reduce the value by a factor of 
#‘reltol * (abs(val) + reltol)’ 

# glm
#glm.control(epsilon = 1e-8, maxit = 25, trace = FALSE)


#utils::assignInNamespace("q", 
#   function(save = "no", status = 0, runLast = TRUE) {
#     .Internal(quit(save, status, runLast))
#   }, "base")    
#
#utils::assignInNamespace("quit", 
#   function(save = "no", status = 0, runLast = TRUE) {
#     .Internal(quit(save, status, runLast))
#   }, "base")
#

#---------------------------------------------------------------------------
##################
# OFTEN USED
##################
#message("often used")
## Greetings and Colors
quiet  <- any(match(c("-q", "--silent", "--quiet", "--slave"), commandArgs()), na.rm=TRUE)

if (!quiet){

    ## Color Output
    if( Sys.getenv("TERM") %in% c("xterm-256color", "screen-256color") ){
        library("colorout")
        invisible(setOutputColors256(verbose=F))
    }

    ## Formatting
    try( wideScreen <- function( 
        howWide=Sys.getenv("COLUMNS"),
        howTall=Sys.getenv("LINES"),
        tt=F) {
            if(tt){
                Wide <- as.integer(howTall)*2
                Tall <- as.integer(howWide)
            } else {
                Wide <- as.integer(howWide)
                Tall <- as.integer(howTall)*2
            }
            options(width=Wide, height=Tall)
            message(paste0(
                "width=",Wide,", ",
                "height=",Tall) )
        }, silent=T
    )
    #options(width= as.integer( 
    #    system("stty -a | head -n 1 | awk '{print $7}' | sed 's/;//'", intern=T)))

    ### Greeting ###
    cat("\n\033[38;5;11m     CHEAT SHEETS: \033[0m\n")
    cat("source('/home/Jadamso/Desktop/Common/R_Code/RCheats.R') \n")


    cat("\n\033[38;5;11m     R INFORMATION: \033[0m\n")
    cat(commandArgs(), "\n")
    # cat(paste(R.home(component = "home"), "\n"))
    cat("~/Rprofile.site \n")
    cat("wideScreen() \n")

    cat("\n\033[38;5;11m     USER INFORMATION: \033[0m\n")
    cat( paste0(Jordan, "\n\n"))

    #cat("     Release Memory: \n")
    #cat("as root: free && sync && echo 3 > /proc/sys/vm/drop_caches && free \n")
    #cat("sudo swapoff -a && sudo swapon -a \n\n")

}

# http://misc.flogisoft.com/bash/tip_colors_and_formatting
#cat("\033[38;5,92m red \033[0m \n")
#cat("\033[38;5;11m red \033[0m \n")
#library("crayon")
#cat(yellow$bgMagenta$bold('Hello world!'),"\n")

#---------------------------------------------------------------------------
##################
# REVOLUTION 
##################
##  Setup
#message("revo setup")

#### Utilities
load_if_installed <- function(package) {
  if (!identical(system.file(package="RevoUtilsMath"), "")) {
    do.call('library', list(package))
    return(TRUE)
  } else
    return(FALSE)
}

if(load_if_installed("RevoUtilsMath")){
  local({
    ncores <- RevoUtilsMath::getMKLthreads()
    msg <- paste0( "Multithreaded BLAS/LAPACK libraries detected.",
        "Using %d cores for math algorithms.")
    message(sprintf(msg, ncores))
    invisible(NULL)
  })
}
# REVO Options
#repos.date   <- "2015-08-27"
#Revo.version <- structure(list(major="3", minor="2.2", "BuildID"="1"),
#   class = "simple.list")
#options(repos = c(CRAN = paste("http://mran.revolutionanalytics.com/snapshot/",
#    repos.date,sep=""))) ## for Microsoft Revolution R

#Sys.setenv("MKL_INTERFACE_LAYER"="GNU,LP64")
#Sys.setenv("MKL_THREADING_LAYER"="GNU")

#---------------------------------------------------------------------------
##################
# UNUSED
##################

## Library and Packages

# update.packages(checkBuilt=TRUE, ask=FALSE)

## Quit without saving
#assignInNamespace( "q", function( save="no", status= 0, runLast=TRUE) {
#    .Internal(quit(save, status, runLast)) },    "base")
#q <- function (save="no", ...) { quit(save=save, ...) }


### Computation ###
## Parallel
#library(foreach)   # Parallel Processing Loop
#library(doMC)      # Do MultiCore Processing
#library(parallel)  # Parallel Processing
#library(pnmath)     # MultiCore Functions
## Multi-Core Parameters
#cores = as.numeric(system("nproc", intern=TRUE))
#setMKLthreads(1)
#registerDoMC(cores-1)

#try( library(RevoUtilsMath), silent=T)

#options(download.file.method = "curl") #if (capabilities("libcurl")) {
#    options(download.file.method = "libcurl")}





## Rprofile
#http://www.r-bloggers.com/fun-with-rprofile-and-customizing-r-startup/
#http://www.r-bloggers.com/customize-your-rprofile-and-keep-your-workspace-clean/
# http://www.noamross.net/blog/2012/11/2/rprofile.html

## .First() run at the start of every R session. 
#.First <- function() {
    #load commonly used packages? 
    #cat("\nSuccessfully loaded /usr/local/lib64/R/etc/Rprofile.site",date(),"\n")
#} 

## .Last() run at the end of the session
#.Last <- function() {
#    # save command history here?
#    cat("\nGoodbye at ", date(), "\n")
#}





